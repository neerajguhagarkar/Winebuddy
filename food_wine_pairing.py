{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10081894,"sourceType":"datasetVersion","datasetId":6215196}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:50.083679Z\",\"iopub.execute_input\":\"2024-12-02T22:09:50.085005Z\",\"iopub.status.idle\":\"2024-12-02T22:09:50.094508Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:50.084945Z\",\"shell.execute_reply\":\"2024-12-02T22:09:50.093233Z\"}}\nimport os\n\nimport pandas as pd\n\nimport numpy as np\n\nimport string\n\nfrom operator import itemgetter\n\nfrom collections import Counter, OrderedDict\n\n\n\nfrom nltk.tokenize import word_tokenize, sent_tokenize\n\nfrom nltk.stem import SnowballStemmer\n\nfrom nltk.corpus import stopwords\n\n\n\nfrom gensim.models.phrases import Phrases, Phraser\n\nfrom gensim.models import Word2Vec\n\n\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.decomposition import PCA\n\nfrom matplotlib import pyplot as plt\n\n\n\nfrom scipy import spatial\n\nimport ast\n\n\n\nimport re\n\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\nfrom matplotlib import gridspec\n\nfrom math import pi\n\n\n\npd.set_option('display.max_rows', 500)\n\npd.set_option('display.max_columns', 500)\n\npd.options.mode.chained_assignment = None\n\n# %% [markdown]\n# ### Loading the Relevant Data Files\n# \n# \n# \n# First up, the dataset with all our wine varieties and their average aroma & nonaroma embeddings.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:50.096207Z\",\"iopub.execute_input\":\"2024-12-02T22:09:50.096560Z\",\"iopub.status.idle\":\"2024-12-02T22:09:50.185944Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:50.096526Z\",\"shell.execute_reply\":\"2024-12-02T22:09:50.184808Z\"}}\nwine_variety_vectors = pd.read_csv('/kaggle/input/wine-aromas-nonaromas-csv/wine_aromas_nonaromas.csv', index_col='Unnamed: 0')\n\nwine_variety_vectors.head()\n\n# %% [markdown]\n# Before we proceed, we should make sure that the nonaromas are modeled on a scale from low to high for each flavor. At a glance, those for weight, acid, salt and bitter need to be flipped.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:50.188009Z\",\"iopub.execute_input\":\"2024-12-02T22:09:50.188461Z\",\"iopub.status.idle\":\"2024-12-02T22:09:50.198528Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:50.188421Z\",\"shell.execute_reply\":\"2024-12-02T22:09:50.197219Z\"}}\nwine_variety_vectors['weight'] = wine_variety_vectors['weight'].apply(lambda x: 1 - x)\n\nwine_variety_vectors['acid'] = wine_variety_vectors['acid'].apply(lambda x: 1 - x)\n\nwine_variety_vectors['salt'] = wine_variety_vectors['salt'].apply(lambda x: 1 - x)\n\nwine_variety_vectors['bitter'] = wine_variety_vectors['bitter'].apply(lambda x: 1 - x)\n\n# %% [markdown]\n# Let's load the other files we'll need:\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:50.199846Z\",\"iopub.execute_input\":\"2024-12-02T22:09:50.200165Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.550602Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:50.200136Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.549452Z\"}}\n# a file containing the 50 most frequently appearing descriptors for each wine\n\ndescriptor_frequencies = pd.read_csv('/kaggle/input/wine-aromas-nonaromas-csv/wine_variety_descriptors.csv', index_col='index')\n\n\n\n# our word2vec model for all wine and food terms\n\nwine_word2vec_model = Word2Vec.load(\"/kaggle/input/wine-aromas-nonaromas-csv/food_word2vec_model.bin\")\n\nword_vectors = wine_word2vec_model.wv \n\n\n\n# a file with the average wine nonaroma vectors for each nonaroma\n\nfood_nonaroma_infos = pd.read_csv('/kaggle/input/wine-aromas-nonaromas-csv/average_nonaroma_vectors.csv', index_col='Unnamed: 0')\n\n# %% [markdown]\n# #### Extracting Nonaroma Values from Food\n# \n# \n# \n# We will need a method to extract nonaroma values from food. We will compute a value for each nonaroma by looking at the distance between a food's embedding and the embedding that represents each nonaroma. We will normalize this to return a value between 0 and 1. Then, we will further standardize this by mapping the value between 0 and 1 to an ordinal integer value between 1 (low) and 4 (high). \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.552680Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.553028Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.565135Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.552979Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.563737Z\"}}\n# this function scales each nonaroma between 0 and 1\n\ndef minmax_scaler(val, minval, maxval):\n\n    val = max(min(val, maxval), minval)\n\n    normalized_val = (val - minval)/(maxval - minval)\n\n    return normalized_val\n\n\n\n# this function makes sure that a scaled value (between 0 and 1) is returned for a food nonaroma\n\ndef check_in_range(label_range_dict, value):\n\n    for label, value_range_tuple in label_range_dict.items():\n\n        lower_end = value_range_tuple[0]\n\n        upper_end = value_range_tuple[1]\n\n        if value >= lower_end and value <= upper_end:\n\n            return label\n\n        else:\n\n            continue\n\n\n\n# this function calculates the average word embedding of all foods supplied as input\n\ndef calculate_avg_food_vec(sample_foods):\n\n    sample_food_vecs = []\n\n    for s in sample_foods:\n\n        sample_food_vec = word_vectors[s]\n\n        sample_food_vecs.append(sample_food_vec)\n\n    sample_food_vecs_avg = np.average(sample_food_vecs, axis=0)\n\n    return sample_food_vecs_avg\n\n\n\n# this function returns two things: a score (between 0 and 1) and a normalized value (integer between 1 and 4) for a given nonaroma\n\ndef nonaroma_values(nonaroma, average_food_embedding):\n\n    average_taste_vec = food_nonaroma_infos.at[nonaroma, 'average_vec']\n\n    average_taste_vec = re.sub('\\s+', ',', average_taste_vec)\n\n    average_taste_vec = average_taste_vec.replace('[,', '[')\n\n    average_taste_vec  = np.array(ast.literal_eval(average_taste_vec))\n\n\n\n    similarity = 1 - spatial.distance.cosine(average_taste_vec, average_food_embedding)\n\n    # scale the similarity using our minmax scaler\n\n    scaled_similarity = minmax_scaler(similarity, food_nonaroma_infos.at[nonaroma, 'farthest'], \n\n                                      food_nonaroma_infos.at[nonaroma, 'closest'])\n\n    standardized_similarity = check_in_range(food_weights[nonaroma], scaled_similarity)\n\n    similarity_and_scalar = (scaled_similarity, standardized_similarity)\n\n    return similarity_and_scalar\n\n\n\n# this function loops through the various nonaromas, returning the nonaroma scores & normalized values, the body/weight of the food and the average food embedding \n\ndef return_all_food_values(sample_foods):\n\n    food_nonaromas = dict()\n\n    average_food_embedding = calculate_avg_food_vec(sample_foods)\n\n    for nonaroma in ['sweet', 'acid', 'salt', 'piquant', 'fat', 'bitter']:\n\n        food_nonaromas[nonaroma] = nonaroma_values(nonaroma, average_food_embedding)\n\n    food_weight = nonaroma_values('weight', average_food_embedding)\n\n    return food_nonaromas, food_weight, average_food_embedding\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.566665Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.567088Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.583506Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.567052Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.582405Z\"}}\n# this is the mapping of food similarities to the normalized ordinal integer values between 1 and 4\n\nfood_weights = {\n\n    'weight': {1: (0, 0.3), 2: (0.3, 0.5), 3: (0.5, 0.7), 4: (0.7, 1)},\n\n    'sweet': {1: (0, 0.45), 2: (0.45, 0.6), 3: (0.6, 0.8), 4: (0.8, 1)},\n\n    'acid': {1: (0, 0.4), 2: (0.4, 0.55), 3: (0.55, 0.7), 4: (0.7, 1)},\n\n    'salt': {1: (0, 0.3), 2: (0.3, 0.55), 3: (0.55, 0.8), 4: (0.8, 1)},\n\n    'piquant': {1: (0, 0.4), 2: (0.4, 0.6), 3: (0.6, 0.8), 4: (0.8, 1)},\n\n    'fat': {1: (0, 0.4), 2: (0.4, 0.5), 3: (0.5, 0.6), 4: (0.6, 1)},\n\n    'bitter': {1: (0, 0.3), 2: (0.3, 0.5), 3: (0.5, 0.65), 4: (0.65, 1)}\n\n}\n\n# %% [markdown]\n# ### Standardizing Nonaroma Values from Wine\n# \n# \n# \n# To compare the nonaroma characteristics of wines and foods, we need to normalize them on the same scale (1-4).\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.584944Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.585405Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.609276Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.585332Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.608387Z\"}}\nwine_weights = {\n\n    'weight': {1: (0, 0.25), 2: (0.25, 0.45), 3: (0.45, 0.75), 4: (0.75, 1)},\n\n    'sweet': {1: (0, 0.25), 2: (0.25, 0.6), 3: (0.6, 0.75), 4: (0.75, 1)},\n\n    'acid': {1: (0, 0.05), 2: (0.05, 0.25), 3: (0.25, 0.5), 4: (0.5, 1)},\n\n    'salt': {1: (0, 0.15), 2: (0.15, 0.25), 3: (0.25, 0.7), 4: (0.7, 1)},\n\n    'piquant': {1: (0, 0.15), 2: (0.15, 0.3), 3: (0.3, 0.6), 4: (0.6, 1)},\n\n    'fat': {1: (0, 0.25), 2: (0.25, 0.5), 3: (0.5, 0.7), 4: (0.7, 1)},\n\n    'bitter': {1: (0, 0.2), 2: (0.2, 0.37), 3: (0.37, 0.6), 4: (0.6, 1)}\n\n}\n\n            \n\nwine_variety_vectors_normalized = wine_variety_vectors.copy()\n\nfor w, subdict in wine_weights.items():\n\n    wine_variety_vectors_normalized[w] = wine_variety_vectors_normalized[w].apply(lambda x: check_in_range(subdict, x))\n\n\n\nwine_variety_vectors_normalized.sort_index(inplace=True)\n\n# %% [markdown]\n# ### Pairing Rules\n# \n# \n# \n# Now, we will set some rules for creating wine pairings. We will run the rules below sequentially to eliminate pairings that do not make sense. \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.610946Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.611344Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.623302Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.611288Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.622213Z\"}}\ndef weight_rule(df, food_weight):\n\n    # Rule 1: the wine should have at least the same body as the food\n\n    df = df.loc[(df['weight'] >= food_weight[1] - 1) & (df['weight'] <= food_weight[1])]\n\n    return df\n\n\n\ndef acidity_rule(df, food_nonaromas):\n\n    # Rule 2: the wine should be at least as acidic as the food\n\n    df = df.loc[df['acid'] >= food_nonaromas['acid'][1]]\n\n    return df\n\n\n\ndef sweetness_rule(df, food_nonaromas):\n\n    # Rule 3: the wine should be at least as sweet as the food\n\n    df = df.loc[df['sweet'] >= food_nonaromas['sweet'][1]]\n\n    return df\n\n\n\ndef bitterness_rule(df, food_nonaromas):\n\n    # Rule 4: bitter wines do not pair well with bitter foods \n\n    if food_nonaromas['bitter'][1] == 4:\n\n        df = df.loc[df['bitter'] <= 2]\n\n    return df\n\n\n\ndef bitter_salt_rule(df, food_nonaromas):\n\n    # Rule 5: bitter and salt do not go well together\n\n    if food_nonaromas['bitter'][1] == 4:\n\n        df = df.loc[(df['salt'] <= 2)]\n\n    if food_nonaromas['salt'] == 4:\n\n        df = df.loc[(df['bitter'][1] <= 2)]\n\n    return df\n\n    \n\ndef acid_bitter_rule(df, food_nonaromas):\n\n    # Rule 6: acid and bitterness do not go well together\n\n    if food_nonaromas['acid'][1] == 4:\n\n        df = df.loc[(df['bitter'] <= 2)]\n\n    if food_nonaromas['bitter'][1] == 4:\n\n        df = df.loc[(df['acid'] <= 2)]\n\n    return df\n\n\n\ndef acid_piquant_rule(df, food_nonaromas):\n\n    # Rule 7: acid and piquant do not go well together\n\n    if food_nonaromas['acid'][1] == 4:\n\n        df = df.loc[(df['piquant'] <= 2)]\n\n    if food_nonaromas['piquant'][1] == 4:\n\n        df = df.loc[(df['acid'] <= 2)]\n\n    return df\n\n\n\ndef nonaroma_rules(wine_df, food_nonaromas, food_weight):\n\n    df = weight_rule(wine_df, food_weight)\n\n    list_of_tests = [acidity_rule, sweetness_rule, bitterness_rule, bitter_salt_rule, acid_bitter_rule, acid_piquant_rule]\n\n    for t in list_of_tests:\n\n        # only apply the rule if it retains a sufficient number of wines in the selection.\n\n        df_test = t(df, food_nonaromas)\n\n        if df_test.shape[0] > 5:\n\n            df = t(df, food_nonaromas)\n\n#         print(df.shape)\n\n    return df\n\n\n# %% [markdown]\n# Now, we would like to find which pairings are contrasting or congruent. Contrasting pairings have nonaroma attributes that are different but that match well, whereas congruent pairings make use of shared compounds between wine and food. \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.627155Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.627539Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.642068Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.627505Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.640991Z\"}}\ndef sweet_pairing(df, food_nonaromas):\n\n    # Rule 1: sweet food goes well with highly bitter, fat, piquant, salt or acid wine\n\n    if food_nonaromas['sweet'][1] == 4:\n\n        df['pairing_type'] = np.where(((df.bitter == 4) | (df.fat == 4) | (df.piquant == 4) | (df.salt == 4) | (df.acid == 4)), 'contrasting', df.pairing_type)\n\n    return df\n\n\n\ndef acid_pairing(df, food_nonaromas):\n\n    # Rule 2: acidic food goes well with highly sweet, fat, or salt wine\n\n    if food_nonaromas['acid'][1] == 4:\n\n        df['pairing_type'] = np.where(((df.sweet == 4) | (df.fat == 4) | (df.salt == 4)), 'contrasting', df.pairing_type)\n\n    return df\n\n\n\ndef salt_pairing(df, food_nonaromas):\n\n    # Rule 3: sweet food goes well with highly bitter, fat, piquant, salt or acid wine\n\n    if food_nonaromas['salt'][1] == 4:\n\n        df['pairing_type'] = np.where(((df.bitter == 4) | (df.sweet == 4) | (df.piquant == 4) | (df.fat == 4) | (df.acid == 4)), 'contrasting', df.pairing_type)\n\n    return df\n\n\n\ndef piquant_pairing(df, food_nonaromas):\n\n    # Rule 4: piquant food goes well with highly sweet, fat, or salt wine\n\n    if food_nonaromas['piquant'][1] == 4:\n\n        df['pairing_type'] = np.where(((df.sweet == 4) | (df.fat == 4) | (df.salt == 4)), 'contrasting', df.pairing_type)\n\n    return df\n\n\n\ndef fat_pairing(df, food_nonaromas):\n\n    # Rule 5: fatty food goes well with highly bitter, fat, piquant, salt or acid wine\n\n    if food_nonaromas['fat'][1] == 4:\n\n        df['pairing_type'] = np.where(((df.bitter == 4) | (df.sweet == 4) | (df.piquant == 4) | (df.salt == 4) | (df.acid == 4)), 'contrasting', df.pairing_type)\n\n    return df\n\n\n\ndef bitter_pairing(df, food_nonaromas):\n\n    # Rule 6: bitter food goes well with highly sweet, fat, or salt wine\n\n    if food_nonaromas['bitter'][1] == 4:\n\n        df['pairing_type'] = np.where(((df.sweet == 4) | (df.fat == 4) | (df.salt == 4)), 'contrasting', df.pairing_type)\n\n    return df\n\n\n\ndef congruent_pairing(pairing_type, max_food_nonaroma_val, wine_nonaroma_val):\n\n    if pairing_type == 'congruent':\n\n        return 'congruent'\n\n    elif wine_nonaroma_val >= max_food_nonaroma_val:\n\n        return 'congruent'\n\n    else:\n\n        return ''\n\n    \n\ndef congruent_or_contrasting(df, food_nonaromas):\n\n    \n\n    # first, look for a congruent match\n\n    max_nonaroma_val = max([i[1] for i in list(food_nonaromas.values())])\n\n    most_defining_tastes = [key for key, val in food_nonaromas.items() if val[1] == max_nonaroma_val]\n\n    df['pairing_type'] = ''\n\n    for m in most_defining_tastes:\n\n        df['pairing_type'] = df.apply(lambda x: congruent_pairing(x['pairing_type'], food_nonaromas[m][1], x[m]), axis=1)\n\n\n\n    # then, look for any contrasting matches\n\n    list_of_tests = [sweet_pairing, acid_pairing, salt_pairing, piquant_pairing, fat_pairing, bitter_pairing]\n\n    for t in list_of_tests:\n\n        df = t(df, food_nonaromas)\n\n    return df\n\n# %% [markdown]\n# Finally, we will prioritize wine recommendations that share aroma characteristics with the food. We will sort the resulting recommendations by similarity between the wine aroma embedding and the average food embedding, in descending order. \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.643401Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.643813Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.657214Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.643777Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.655802Z\"}}\ndef sort_by_aroma_similarity(df, food_aroma):\n\n    \n\n    def nparray_str_to_list(array_string):\n\n        average_taste_vec = re.sub('\\s+', ',', array_string)\n\n        average_taste_vec = average_taste_vec.replace('[,', '[')\n\n        average_taste_vec  = np.array(ast.literal_eval(average_taste_vec))\n\n        return average_taste_vec\n\n    \n\n    df['aroma'] = df['aroma'].apply(nparray_str_to_list)\n\n    df['aroma_distance'] = df['aroma'].apply(lambda x: spatial.distance.cosine(x, food_aroma))\n\n    df.sort_values(by=['aroma_distance'], ascending=True, inplace=True)\n\n    return df\n\n# %% [markdown]\n# For the top wine recommendations, we would also like to have a bit of additional context on which aroma descriptors in the wine match well with our food. \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:32:53.284344Z\",\"iopub.execute_input\":\"2024-12-02T22:32:53.284747Z\",\"iopub.status.idle\":\"2024-12-02T22:32:53.292926Z\",\"shell.execute_reply.started\":\"2024-12-02T22:32:53.284715Z\",\"shell.execute_reply\":\"2024-12-02T22:32:53.291833Z\"}}\n# these functions return the wine descriptors that most closely match the wine aromas of the selected recommendations. This will help give additional context and justification to the recommendations.\n\n\n\ndef find_descriptor_distance(word, foodvec):\n\n    descriptor_wordvec = word_vectors[word]\n\n    similarity = 1 - spatial.distance.cosine(descriptor_wordvec, foodvec)\n\n    return similarity\n\n\n\ndef most_impactful_descriptors(recommendation):\n    print(\"Recommended\")\n    print(recommendation)\n\n    recommendation_frequencies = descriptor_frequencies.filter(like=recommendation, axis=0)\n\n    recommendation_frequencies['similarity'] = recommendation_frequencies['descriptors'].apply(lambda x: find_descriptor_distance(x, aroma_embedding))    \n\n    recommendation_frequencies.sort_values(['similarity', 'relative_frequency'], ascending=False, inplace=True)\n\n    recommendation_frequencies = recommendation_frequencies.head(5)\n\n    most_impactful_descriptors = list(recommendation_frequencies['descriptors'])\n\n    return most_impactful_descriptors\n\n# %% [markdown]\n# The following function puts all the steps in our recommendation generation process together.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.670568Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.670991Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.686958Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.670948Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.685886Z\"}}\ndef retrieve_pairing_type_info(wine_recommendations, full_nonaroma_table, pairing_type):\n\n    pairings = wine_recommendations.loc[wine_recommendations['pairing_type'] == pairing_type].head(4)\n\n    wine_names = list(pairings.index)\n\n    recommendation_nonaromas = full_nonaroma_table.loc[wine_names, :]\n\n    pairing_nonaromas = recommendation_nonaromas[['sweet', 'acid', 'salt', 'piquant', 'fat', 'bitter']].to_dict('records')\n\n    pairing_body = list(recommendation_nonaromas['weight'])\n\n    impactful_descriptors = list(pairings['most_impactful_descriptors'])\n\n    return wine_names, pairing_nonaromas, pairing_body, impactful_descriptors\n\n# %% [markdown]\n# ### Visualization\n# \n# \n# \n# We will want to examine the proposed recommendations in a visual manner. The following cells lay out functions that we can use to generate a visualization of the food nonaromas, and subsequently nonaroma & aroma details for a series of wine recommendations.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.688256Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.688602Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.700004Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.688570Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.698869Z\"}}\ndef make_spider(gs, n, data, title, color, pairing_type):\n\n    \n\n    # number of variable\n\n    categories = list(food_nonaromas.keys())\n\n    N = len(categories)\n\n\n\n    # What will be the angle of each axis in the plot? (we divide the plot / number of variable)\n\n    angles = [n / float(N) * 2 * pi for n in range(N)]\n\n    angles += angles[:1]\n\n\n\n    # Initialise the spider plot\n\n    ax = plt.subplot(gs[n], polar=True, )\n\n\n\n    # If you want the first axis to be on top:\n\n    ax.set_theta_offset(pi / 2)\n\n    ax.set_theta_direction(-1)\n\n\n\n    # Draw one axe per variable + add labels labels yet\n\n    plt.xticks(angles[:-1], categories, color='grey', size=11)\n\n\n\n    # Draw ylabels\n\n    ax.set_rlabel_position(0)\n\n    plt.yticks([0.25, 0.5, 0.75, 1.0], [\"0.25\",\"0.50\",\"0.75\", \"1.00\"], color=\"grey\", size=0)\n\n    plt.ylim(0, 1)\n\n\n\n    # Ind1\n\n    values = list(data.values())\n\n    values += values[:1]\n\n    ax.plot(angles, values, color=color, linewidth=2, linestyle='solid')\n\n    ax.fill(angles, values, color=color, alpha=0.4)\n\n\n\n    # Add a title\n\n    # Insert a line break in the title if needed\n\n    title_split = str(title).split(',')\n\n    new_title = []\n\n    for number, word in enumerate(title_split):\n\n        if (number % 2) == 0 and number > 0:\n\n            updated_word = '\\n' + word.strip()\n\n            new_title.append(updated_word)\n\n        else:\n\n            updated_word = word.strip()\n\n            new_title.append(updated_word)\n\n    new_title = ', '.join(new_title)\n\n    \n\n    title_incl_pairing_type = new_title + '\\n' + '(' + str(pairing_type) + ')'\n\n    \n\n    plt.title(title_incl_pairing_type, size=13, color='black', y=1.2)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.701598Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.701921Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.718130Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.701889Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.717209Z\"}}\ndef plot_number_line(gs, n, value, dot_color):\n\n    ax = plt.subplot(gs[n])\n\n    ax.set_xlim(-1, 2)\n\n    ax.set_ylim(0, 3)\n\n\n\n    # draw lines\n\n    xmin = 0\n\n    xmax = 1\n\n    y = 1\n\n    height = 0.2\n\n\n\n    plt.hlines(y, xmin, xmax)\n\n    plt.vlines(xmin, y - height / 2., y + height / 2.)\n\n    plt.vlines(xmax, y - height / 2., y + height / 2.)\n\n\n\n    # draw a point on the line\n\n    px = value\n\n    plt.plot(px, y, 'ko', ms = 10, mfc = dot_color)\n\n\n\n    # add numbers\n\n    plt.text(xmin - 0.1, y, 'Light-Bodied', horizontalalignment='right', fontsize=11, color='grey')\n\n    plt.text(xmax + 0.1, y, 'Full-Bodied', horizontalalignment='left', fontsize=11, color='grey')\n\n\n\n    plt.axis('off')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.719398Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.719803Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.733534Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.719758Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.732213Z\"}}\ndef create_text(gs, n, impactful_descriptors):\n\n    ax = plt.subplot(gs[n])\n\n    \n\n    ax.set_xticks([])\n\n    ax.set_yticks([])\n\n    for spine in ax.spines.values():\n\n        spine.set_visible(False)\n\n    ax.invert_yaxis()\n\n    \n\n    text = f'Complementary wine aromas:\\n\\n{impactful_descriptors[0]}, \\n{impactful_descriptors[1]}, \\n{impactful_descriptors[2]}, \\n{impactful_descriptors[3]}, \\n{impactful_descriptors[4]}'\n\n    ax.text(x=0, y=1, s=text, fontsize=12, color='grey')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:51.735011Z\",\"iopub.execute_input\":\"2024-12-02T22:09:51.735346Z\",\"iopub.status.idle\":\"2024-12-02T22:09:51.747780Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:51.735316Z\",\"shell.execute_reply\":\"2024-12-02T22:09:51.746703Z\"}}\ndef plot_wine_recommendations(pairing_wines, pairing_nonaromas, pairing_body, impactful_descriptors, pairing_types):\n\n\n\n    subplot_rows = 3\n\n    subplot_columns = 4\n\n    plt.figure(figsize=(20, 7), dpi=96)\n\n\n\n    gs = gridspec.GridSpec(3, 4, height_ratios=[3, 0.5, 1]) \n\n\n\n    spider_nr = 0\n\n    number_line_nr = 4\n\n    descriptor_nr = 8\n\n\n\n    for w in range(4):\n\n        make_spider(gs, spider_nr, pairing_nonaromas[w], pairing_wines[w], 'red', pairing_types[w])\n\n        plot_number_line(gs, number_line_nr, pairing_body[w], dot_color='red')\n\n        create_text(gs, descriptor_nr, impactful_descriptors[w])\n\n        spider_nr += 1\n\n        number_line_nr += 1\n\n        descriptor_nr += 1\n\n# %% [markdown]\n# It's showtime. Time to generate our wine recommendations.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:33:03.594789Z\",\"iopub.execute_input\":\"2024-12-02T22:33:03.595191Z\",\"iopub.status.idle\":\"2024-12-02T22:33:04.053059Z\",\"shell.execute_reply.started\":\"2024-12-02T22:33:03.595147Z\",\"shell.execute_reply\":\"2024-12-02T22:33:04.051289Z\"}}\ntest_food = ['hotdog', 'mustard', 'tomato', 'onion', 'pepperoncini', 'gherkin', 'celery', 'relish']\n\nappetizer = ['trout', 'dill', 'cucumber', 'sour_cream']\n\nentree = ['roast_chicken', 'tarragon', 'sage']\n\ndessert = ['peach', 'pie']\n\ntest = ['roast_chicken']\n\n\nfood_nonaromas, food_weight, aroma_embedding = return_all_food_values(dessert)\n\n\n\nwine_recommendations = wine_variety_vectors_normalized.copy()\n\nwine_recommendations = nonaroma_rules(wine_recommendations, food_nonaromas, food_weight)\n\nwine_recommendations = congruent_or_contrasting(wine_recommendations, food_nonaromas)\n\nwine_recommendations = sort_by_aroma_similarity(wine_recommendations, aroma_embedding)\n\nprint(wine_recommendations.head())\n\n# print(wine_recommendations[wine_recommendations[\"pairing_type\"] == \"Congruent\"])\n\nprint(wine_recommendations.shape)\nprint(wine_recommendations.index[0])\nprint(most_impactful_descriptors(wine_recommendations.index[0]))\nwine_recommendations['most_impactful_descriptors'] = wine_recommendations.index.map(most_impactful_descriptors)\n\n\n\n# see if there are any contrasting suggestions\n\ntry:\n\n    contrasting_wines, contrasting_nonaromas, contrasting_body, impactful_descriptors_contrasting = retrieve_pairing_type_info(wine_recommendations, wine_variety_vectors, 'contrasting')\n\nexcept:\n\n    contrasting_wines = []\n\n\n\ntry:\n\n    congruent_wines, congruent_nonaromas, congruent_body, impactful_descriptors_congruent = retrieve_pairing_type_info(wine_recommendations, wine_variety_vectors, 'congruent')\n\nexcept:\n\n    congruent_wines = []\n\n\n\n# if possible, provide 2 contrasting and 2 congruent options. If not possible, just return 4 options of one type.\n\nif len(contrasting_wines) >= 2 and len(congruent_wines) >= 2:\n\n    wine_names = contrasting_wines[:2] + congruent_wines[:2]\n\n    wine_nonaromas = contrasting_nonaromas[:2] + congruent_nonaromas[:2]\n\n    wine_body = contrasting_body[:2] + congruent_body[:2]\n\n    impactful_descriptors = impactful_descriptors_contrasting[:2] + impactful_descriptors_congruent[:2]\n\n    pairing_types = ['Contrasting', 'Contrasting', 'Congruent', 'Congruent']\n\nelif len(contrasting_wines) >= 2:\n\n    wine_names = contrasting_wines\n\n    wine_nonaromas = contrasting_nonaromas\n\n    wine_body = contrasting_body\n\n    impactful_descriptors = impactful_descriptors_contrasting\n\n    pairing_types = ['Contrasting', 'Contrasting', 'Contrasting', 'Contrasting']\n\nelse:\n\n    wine_names = congruent_wines\n\n    print(wine_names)\n\n    wine_nonaromas = congruent_nonaromas\n\n    wine_body = congruent_body\n\n    impactful_descriptors = impactful_descriptors_congruent\n\n    pairing_types = ['Congruent', 'Congruent', 'Congruent', 'Congruent']\n\n\n\nplot_wine_recommendations(wine_names, wine_nonaromas, wine_body, impactful_descriptors, pairing_types)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:28:30.611755Z\",\"iopub.execute_input\":\"2024-12-02T22:28:30.612253Z\",\"iopub.status.idle\":\"2024-12-02T22:28:30.953617Z\",\"shell.execute_reply.started\":\"2024-12-02T22:28:30.612208Z\",\"shell.execute_reply\":\"2024-12-02T22:28:30.952453Z\"}}\nplt.figure(figsize=(4, 5), dpi=75)\n\n\n\ngs = gridspec.GridSpec(2, 1, height_ratios=[3, 0.5]) \n\n\n\nfood_nonaromas_norm = {k: v[0] for k, v in food_nonaromas.items()}\n\n\n\nfood_names = ' + '.join(dessert)\n\nmake_spider(gs, 0, food_nonaromas_norm, 'Food Flavor Profile:', 'orange', food_names)\n\nplot_number_line(gs, 1, food_weight[0], dot_color='orange')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-12-02T22:09:53.006327Z\",\"iopub.status.idle\":\"2024-12-02T22:09:53.006759Z\",\"shell.execute_reply.started\":\"2024-12-02T22:09:53.006582Z\",\"shell.execute_reply\":\"2024-12-02T22:09:53.006601Z\"}}\nprint(food_nonaromas_norm)","metadata":{"_uuid":"ff670c7c-84dc-4c38-8621-a2cc14e1c1e5","_cell_guid":"4ab4b8d4-1cbc-4e99-855b-8f58dd7c2e52","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}